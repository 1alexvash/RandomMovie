{"version":3,"sources":["images/star.jpg","images/google.png","images/youtube.png","images/torrent.png","components/Spinner/Spinner.js","components/Preloader/Preloader.js","components/Description/Description.js","components/Movie/Movie.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Spinner","className","Preloader","useState","preloaderShown","setPreloaderVisiblity","randomLoadingTime","Math","round","random","setTimeout","Description","title","loading","undefined","Movie","movie","backdrop_path","overview","vote_average","release_date","src","alt","StarImg","substring","href","rel","target","GoogleImg","YoutubeImg","TorrentImg","App","randomMovie","setRandomMovie","setLoading","genre","setGenre","getMovie","a","console","log","randomPage","ceil","axios","result","data","results","floor","onChange","e","value","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0d8e0a93.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/star.d2b2e36e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/google.b5172027.png\";","module.exports = __webpack_public_path__ + \"static/media/youtube.5378d37a.png\";","module.exports = __webpack_public_path__ + \"static/media/torrent.87f579ec.png\";","import React from \"react\";\n\nconst Spinner = () => (\n  <div className=\"spinner\">\n    <div />\n    <div />\n    <div />\n    <div />\n  </div>\n);\n\nexport default Spinner;\n","import React, { useState } from \"react\";\nimport Spinner from \"../Spinner/Spinner\";\n\nconst Preloader = () => {\n  const [preloaderShown, setPreloaderVisiblity] = useState(true);\n\n  let randomLoadingTime = 3000 + Math.round(Math.random() * 3) * 1000;\n\n  setTimeout(() => {\n    setPreloaderVisiblity(false);\n  }, randomLoadingTime);\n\n  return preloaderShown ? (\n    <div className=\"Preloader\">\n      <Spinner></Spinner>\n    </div>\n  ) : (\n    \"\"\n  );\n};\n\nexport default Preloader;\n","import React, { Fragment } from \"react\";\n\nconst Description = ({ title, loading }) =>\n  title === undefined && loading === false ? (\n    <Fragment>\n      <div className=\"about\">Find a great movie!</div>\n      <div className=\"purpose\">\n        Have you ever wonder not knowing how to spend your free evening? We do\n        and know we've got your evening covered. Just fill the form whatever you\n        feel like to watch for example horror and we'lll find something for ya!\n      </div>\n    </Fragment>\n  ) : (\n    \"\"\n  );\n\nexport default Description;\n","import React from \"react\";\nimport StarImg from \"../../images/star.jpg\";\nimport GoogleImg from \"../../images/google.png\";\nimport YoutubeImg from \"../../images/youtube.png\";\nimport TorrentImg from \"../../images/torrent.png\";\n\nconst Movie = ({\n  movie: { backdrop_path, title, overview, vote_average, release_date }\n}) => {\n  return title !== undefined ? (\n    <div className=\"movie\">\n      <div className=\"title\">{title}</div>\n      <div className=\"image\">\n        <img\n          src={`https://image.tmdb.org/t/p/original//${backdrop_path}`}\n          alt=\"poster\"\n        />\n      </div>\n      <div className=\"description\">{overview}</div>\n      <div className=\"rating\">\n        <img src={StarImg} alt=\"star\" /> {vote_average}\n      </div>\n      <div className=\"year\">Year: {release_date.substring(0, 4)}</div>\n      <div className=\"links\">\n        <a\n          href={`https://www.google.com/search?q=${title}`}\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n        >\n          <img\n            src={GoogleImg}\n            title=\"search on google\"\n            alt=\"search on google\"\n          />\n        </a>\n        <a\n          href={`https://www.youtube.com/results?search_query=${title}`}\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n        >\n          <img\n            src={YoutubeImg}\n            title=\"search on youtube\"\n            alt=\"search on youtube\"\n          />\n        </a>\n        <a\n          href={`https://www.google.com/search?q=${title} torrent`}\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n        >\n          <img\n            src={TorrentImg}\n            title=\"search torrent files\"\n            alt=\"search torrent files\"\n          />\n        </a>\n      </div>\n    </div>\n  ) : (\n    \"\"\n  );\n};\n\nexport default Movie;\n","import React, { useState } from \"react\";\nimport \"./scss/main.css\";\n\nimport Preloader from \"./components/Preloader/Preloader\";\nimport Description from \"./components/Description/Description\";\nimport Movie from \"./components/Movie/Movie\";\nimport Spinner from \"./components/Spinner/Spinner\";\n\nimport axios from \"axios\";\n\nconst API_KEY = \"0ace63cfa75b0924b1853cf7b0fe5d14\";\n\nconst language = \"en-US\";\n\nconst App = () => {\n  const [randomMovie, setRandomMovie] = useState({});\n\n  const [loading, setLoading] = useState(false);\n\n  const [genre, setGenre] = useState(\"all\");\n\n  const getMovie = async () => {\n    setRandomMovie({});\n    setLoading(true);\n    console.log(\"=== STARTED LOADING ===\");\n\n    let randomPage = Math.ceil(Math.random() * 500);\n\n    const result = await axios(\n      `https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&language=${language}&sort_by=popularity.desc&page=${randomPage}${\n        genre !== \"all\" ? `&with_genres=${genre}` : \"\"\n      }`\n    );\n\n    console.log(\"REQUEST RESULTS\");\n    console.log(result);\n\n    const data = result.data;\n    let randomMovie = data.results[Math.floor(Math.random() * 20)];\n    console.log(\"Random Movie\");\n    console.log(randomMovie);\n    console.log(\"=== FINISHED LOADING ===\");\n    setLoading(false);\n    setRandomMovie(randomMovie);\n\n    if (randomMovie.backdrop_path === null) {\n      getMovie();\n      console.log(\"searching for a movie with an image\");\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Preloader />\n      <Description title={randomMovie.title} loading={loading} />\n      {loading ? <Spinner /> : <Movie movie={randomMovie}></Movie>}\n      <div className=\"genre-name\">Pick Up a genre:</div>\n      <select className=\"select-genre\" onChange={e => setGenre(e.target.value)}>\n        <option value=\"all\">All</option>\n        <option value=\"27\">Horror</option>\n        <option value=\"35\">Comedy</option>\n        <option value=\"28\">Action</option>\n        <option value=\"12\">Adventure</option>\n        <option value=\"99\">Documentary</option>\n        <option value=\"18\">Fantasy</option>\n        <option value=\"10749\">Romance</option>\n        <option value=\"878\">Science Fiction</option>\n        <option value=\"10752\">Thriller</option>\n      </select>\n      <button onClick={getMovie} className=\"get-movie\">\n        {randomMovie.title ? \"Get Another Movie\" : \"Get Movie\"}\n      </button>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}